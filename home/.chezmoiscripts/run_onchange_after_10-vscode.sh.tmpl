#!/bin/bash

set -euo pipefail

{{ template "scripts/helper" . }}

log_info "Configuring VSCode and Cursor..."

# Create required directories if they don't exist.
# This is needed for symlinking the keybindings, settings, etc.
for dir in "$HOME/Library/Application Support/Code/User" "$HOME/Library/Application Support/Cursor/User"; do
  if [ ! -d "$dir" ]; then
    log_debug "Creating directory: $dir"
    mkdir -p "$dir"
  fi
done

# Function to manage extensions for a specific editor
manage_extensions() {
  local cmd=$1
  local editor_name=$2

  if command -v $cmd >/dev/null; then
    log_info "Managing ${editor_name} extensions..."
    
    # Get currently installed extensions
    local installed_extensions=$($cmd --list-extensions)
    
    # Install missing extensions
    {{- range .extensions.vscode }}
    if ! echo "$installed_extensions" | grep -q "^{{ . }}$"; then
      log_debug "Installing {{ . }}..."
      $cmd --install-extension "{{ . }}"
    else
      log_debug "Extension {{ . }} is already installed"
    fi
    {{- end }}

    while true; do
    read -p "Do you want to continue? (y/n): " answer
      case "$answer" in
        [Yy]* ) 
            echo "Continuing..."
            break
            ;;
        [Nn]* ) 
            echo "Exiting..."
            exit 0
            ;;
        * ) 
            echo "Invalid response. Please enter y or n."
            ;;
      esac
    done

    # Remove extensions that are not in our list
    echo "$installed_extensions" | while read ext; do
      if [[ -n "$ext" ]]; then  # Skip empty lines
        local found=0
        {{- range .extensions.vscode }}
        [[ "{{ . }}" == "$ext" ]] && found=1
        {{- end }}
        if [[ $found -eq 0 ]]; then
          echo "Do something"
          # while true; do
          # read -p "Do you want to continue? (y/n): " answer
          #   case "$answer" in
          #     [Yy]* ) 
          #         echo "Continuing..."
          #         break
          #         ;;
          #     [Nn]* ) 
          #         echo "Exiting..."
          #         exit 0
          #         ;;
          #     * ) 
          #         echo "Invalid response. Please enter y or n."
          #         ;;
          #   esac
          # done
          # read -p "Extension '$ext' found in $editor_name but not in extensions file. Uninstall? [y/N] " yn
          # if [[ $yn == [Yy]* ]]; then
          #   log_debug "Removing unlisted extension: $ext"
          #   $cmd --uninstall-extension "$ext"
          # else
          # log_warning "Skipped uninstall of: $ext. Add it to your extensions file to keep it."
          # fi
        fi
      fi
    done
  else
    log_warning "${editor_name} is not installed. Skipping extension management."
  fi
}

# Manage extensions for both editors
manage_extensions "code" "VSCode"
manage_extensions "cursor" "Cursor"

log_info "VSCode/Cursor configuration complete!" 