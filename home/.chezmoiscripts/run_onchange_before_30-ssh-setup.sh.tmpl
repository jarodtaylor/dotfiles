#!/bin/bash

set -eo pipefail

# Create .ssh directory if it doesn't exist
mkdir -p ~/.ssh
chmod 700 ~/.ssh

{{- if and (lookPath "op") (eq (env "ONEPASSWORD_AVAILABLE") "true") }}
echo "🔑 SSH keys managed by 1Password - setting up key files..."

# Verify 1Password is working
if ! op account list &>/dev/null; then
  echo "❌ 1Password CLI not authenticated"
  echo "   Please run 'op signin' first"
  exit 1
fi

# Create SSH key files from 1Password
echo "📥 Retrieving SSH keys from 1Password..."

# Personal key
if op read "op://Personal/4ytcjbe2ui6iz5sjfe7fn54jea/public_key" > ~/.ssh/id.pub 2>/dev/null; then
  echo "✅ Personal SSH public key retrieved"
else
  echo "⚠️  Could not retrieve personal SSH key from 1Password"
fi

# Work key
if op read "op://Personal/orsplwhcmkbfmxdwbf6udvpjvu/public_key" > ~/.ssh/work_id.pub 2>/dev/null; then
  echo "✅ Work SSH public key retrieved"
else
  echo "⚠️  Could not retrieve work SSH key from 1Password"
fi

echo "✅ SSH keys configured via 1Password"
{{- else }}
echo "🔑 Setting up SSH keys manually..."

# Function to generate key if it doesn't exist
generate_key_if_missing() {
  local key_path=$1
  local key_name=$2
  local default_email="$USER@$(hostname)"

  if [ ! -f "$key_path" ]; then
    echo "Generating $key_name SSH key..."
    read -p "Enter email for the $key_name key [$default_email]: " email
    email=${email:-$default_email}
    ssh-keygen -t ed25519 -C "$email" -f "$key_path" -N ""
    echo "✅ $key_name key generated at $key_path"
    echo "📋 Public key:"
    cat "${key_path}.pub"
    echo ""
    echo "Add this public key to your GitHub account:"
    echo "https://github.com/settings/ssh/new"
    echo ""
    read -p "Press Enter to continue..."
  else
    echo "✅ $key_name key already exists at $key_path"
  fi
}

# Generate personal key
generate_key_if_missing "$HOME/.ssh/id_ed25519" "personal"

# Generate work key
generate_key_if_missing "$HOME/.ssh/work_id_ed25519" "work"

echo "✅ SSH key setup completed"
{{- end }}
