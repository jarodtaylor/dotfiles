# Required tools and their purposes:
# - fzf (Fuzzy Finder): Interactive filtering tool for command-line
#   https://github.com/junegunn/fzf
#   Used for: Interactive selection, preview windows, and fuzzy searching
#
# - fd (Find Alternative): Modern replacement for 'find'
#   https://github.com/sharkdp/fd
#   Used for: Fast file searching, respects .gitignore by default
#
# - bat (Cat Alternative): Cat clone with syntax highlighting
#   https://github.com/sharkdp/bat
#   Used for: Syntax-highlighted previews in fzf windows
#
# - ripgrep (rg): Modern grep alternative
#   https://github.com/BurntSushi/ripgrep
#   Used for: Fast content searching in files
#
# - eza: Modern replacement for ls
#   https://github.com/eza-community/eza
#   Used for: Directory tree previews in fzf

# Core FZF configuration
# Uses: fd for file finding
# export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git"
# export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# export FZF_ALT_C_COMMAND="fd --type d --hidden --follow --exclude .git"

#default use bat for previewing fzf results
#fzp fzf --preview='bat --color=always {}'

#use nvim for previewing and editing fzf results
#fzn nvim $(fzf --preview='bat --color=always {}' --preview-window=right:50%:wrap)

# Catppuccin Mocha theme configuration
export FZF_DEFAULT_OPTS=" \
--color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
--color=marker:#b4befe,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8 \
--border rounded \
--preview-window 'right:60%' \
--bind 'ctrl-/:toggle-preview' \
--bind 'ctrl-y:execute-silent(echo {} | pbcopy)' \
--multi"

# Enhanced preview options
# CTRL-T configuration: Preview file contents with bat
export FZF_CTRL_T_OPTS="
  --preview 'bat --style=numbers --color=always {}' \
  --bind 'ctrl-/:change-preview-window(down|hidden|)'"

# ALT-C configuration: Preview directory tree with eza
export FZF_ALT_C_OPTS="
  --preview 'eza --tree --level=2 --color=always {}' \
  --bind 'ctrl-/:change-preview-window(down|hidden|)'"

# Custom functions

# Use fd, fzf, and bat to find, preview, and edit a file in nvim
find_and_edit() {
  local file
  file=$(fd --type f --hidden --follow --exclude .git | fzf \
    --preview 'bat --style=numbers --color=always {}' \
    --bind 'ctrl-/:change-preview-window(down|hidden|)') && \
  ${EDITOR:-nvim} "$file"
}

# Use rg, fzf, and bat to find, preview, and edit a file in nvim
find_in_files() {
  local file line
  rg --color=always --line-number --no-heading "$@" |
    fzf --ansi \
        --delimiter : \
        --preview 'bat --style=numbers --color=always --highlight-line {2} {1}' \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' |
    awk -F: '{print $1 " +" $2}' |
    xargs -o ${EDITOR:-nvim}
}

function frg {
  result=$(rg --ignore-case --color=always --line-number --no-heading "$@" |
    fzf --ansi \
        --color 'hl:-1:underline,hl+:-1:underline:reverse' \
        --delimiter ':' \
        --preview "bat --color=always {1} --theme='Catppuccin Mocha' --highlight-line {2}" \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3')
  file=${result%%:*}
  linenumber=$(echo "${result}" | cut -d: -f2)
  if [[ -n "$file" ]]; then
          $EDITOR +"${linenumber}" "$file"
  fi
}

# fshow - git commit browser (enter for show, ctrl-d for diff, ` toggles sort)
fshow() {
  local out shas sha q k
  while out=$(
      git log --graph --color=always \
          --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
      fzf --ansi --multi --no-sort --reverse --query="$q" \
          --print-query --expect=ctrl-d --toggle-sort=\`); do
    q=$(head -1 <<< "$out")
    k=$(head -2 <<< "$out" | tail -1)
    shas=$(sed '1,2d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
    [ -z "$shas" ] && continue
    if [ "$k" = ctrl-d ]; then
      git diff --color=always $shas | less -R
    else
      for sha in $shas; do
        git show --color=always $sha | less -R
      done
    fi
  done
}

# fglg - Fuzzy git log to find
# glg() {
#   if [ -z "$1" ]; then
#     echo "Usage: glg <search-pattern>"
#     return 1
#   fi
#
#   git log -p --pretty=format:"%H" | 
#     awk -v pattern="$1" '/^[a-f0-9]{40}/ {commit=$1} $0 ~ pattern {print commit}' | 
#     sort -u | 
#     while read sha; do
#       git show --name-only --pretty=format:"%H" "$sha" | awk 'NR==1 {commit=$0} NR>1 {print commit, $0}'
#     done | 
#     fzf --preview '
#       set -- $(echo {} | awk "{print \$1, substr(\$0, index(\$0, \$2))}")
#       git show $1:$2 | bat --color=always --style=numbers --paging=never --file-name=$2
#     ' | awk '{print $1, $2}'
# }
#


glg() {
  if [ -z "$1" ]; then
    echo "Usage: glg <search-pattern>"
    return 1
  fi

  selection=$(
    git log -p --pretty=format:"%H" | 
      awk -v pattern="$1" '/^[a-f0-9]{40}/ {commit=$1} $0 ~ pattern {print commit}' | 
      sort -u | 
      while read sha; do
        git show --name-only --pretty=format:"%H" "$sha" | awk 'NR==1 {commit=$0} NR>1 {print commit, $0}'
      done | 
      fzf --preview '
        set -- $(echo {} | awk "{print \$1, substr(\$0, index(\$0, \$2))}")
        git show -p --color=always $1:$2 | bat --color=always --style=numbers --paging=never --file-name=$2
      '
  )

  if [ -z "$selection" ]; then
    return 0
  fi

  sha=$(echo "$selection" | awk '{print $1}')
  file=$(echo "$selection" | awk '{print substr($0, index($0, $2))}')

  # Ask user what they want to do
  echo "Selected: $sha $file"
  echo "Options:"
  echo "  [1] Show details (default)"
  echo "  [2] Open in Neovim"
  echo "  [3] Explore full repo at this commit (git worktree)"
  echo "  [4] Exit"
  echo -n "Choose an option: "
  read choice

  case "$choice" in
    2) git show "$sha:$file" | nvim -R - ;;
    3) 
      worktree_path="/tmp/git-worktree-$sha"
      echo "Creating worktree at: $worktree_path"
      git worktree add "$worktree_path" "$sha"
      cd "$worktree_path" || exit
      echo "You are now in a read-only version of the repo at commit $sha."
      echo "Use 'cd $worktree_path' to navigate."
      ;;
    *) echo "$sha $file";;
  esac
}

