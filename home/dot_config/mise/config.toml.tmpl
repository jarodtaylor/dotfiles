[tools]
deno = { version = "2" }
elixir = { version = "1.18" }
erlang = { version = "27" }
go = { version = "latest" }
node = { version = "22" }
ruby = { version = "3.3" }

[env]
MISE_RUBY_DEFAULT_PACKAGES_FILE = "~/.config/mise/.default-gems"
MISE_NODE_DEFAULT_PACKAGES_FILE = "~/.config/mise/.default-npm-packages"

[settings]
# plugins can read the versions files used by other version managers (if enabled by the plugin)
# for example, .nvmrc in the case of node's nvm
idiomatic_version_file = true                     # enabled by default (unlike asdf)
#idiomatic_version_file_disable_tools = []  disable for specific tools

# configure `mise install` to always keep the downloaded archive
always_keep_download = false        # deleted after install by default
always_keep_install = false         # deleted on failure by default

# configure how frequently (in minutes) to fetch updated plugin repository changes
# this is updated whenever a new runtime is installed
# (note: this isn't currently implemented but there are plans to add it: https://github.com/jdx/mise/issues/128)
plugin_autoupdate_last_check_duration = '1 week' # set to 0 to disable updates

verbose = false       # set to true to see full installation output, see `MISE_VERBOSE`
http_timeout = "30s"  # set the timeout for http requests as duration string, see `MISE_HTTP_TIMEOUT`
jobs = 4              # number of plugins or runtimes to install in parallel. The default is `4`.
raw = false           # set to true to directly pipe plugins to stdin/stdout/stderr
yes = false           # set to true to automatically answer yes to all prompts

not_found_auto_install = true # see MISE_NOT_FOUND_AUTO_INSTALL
task_output = "prefix" # see Tasks Runner for more information
paranoid = false       # see MISE_PARANOID

# shorthands_file = '~/.config/mise/shorthands.toml' # path to the shorthands file, see `MISE_SHORTHANDS_FILE`
# disable_default_shorthands = false # disable the default shorthands, see `MISE_DISABLE_DEFAULT_SHORTHANDS`
# disable_tools = ['node']           # disable specific tools, generally used to turn off core tools

# env_file = '.env' # load env vars from a dotenv file, see `MISE_ENV_FILE`

experimental = true # enable experimental features

# configure messages displayed when entering directories with config files
# status = { missing_tools = "if_other_versions_installed", show_env = false, show_tools = false }

[plugins]
# specify a custom repo url
# note this will only be used if the plugin does not already exist
# python = 'https://github.com/asdf-community/asdf-python'
