#!/bin/bash
set -eo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}🔐 Age Work Config Re-encryption Utility${NC}"
echo

# Get age key file location
AGE_KEY_FILE="$HOME/key.txt"
WORK_CONFIG_FILE="$HOME/.local/share/chezmoi/home/dot_config/git/encrypted_private_config-work.age.tmpl"

# Check if age key exists
if [ ! -f "$AGE_KEY_FILE" ]; then
    echo -e "${RED}❌ Age key not found at $AGE_KEY_FILE${NC}"
    echo "Run 'chezmoi init' first to generate the age key"
    exit 1
fi

# Get the public key (recipient)
PUBLIC_KEY=$(age-keygen -y "$AGE_KEY_FILE" 2>/dev/null)
if [ -z "$PUBLIC_KEY" ]; then
    echo -e "${RED}❌ Could not extract public key from $AGE_KEY_FILE${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Age key found${NC}"
echo "Public key: $PUBLIC_KEY"
echo

# Check if work config file exists
if [ ! -f "$WORK_CONFIG_FILE" ]; then
    echo -e "${YELLOW}⚠️  Work config file not found at $WORK_CONFIG_FILE${NC}"
    echo "This script will help you create and encrypt a new work config."
    echo

    # Create template content
    cat > /tmp/work-config.txt << 'EOF'
# Work-specific git configuration
# Add your work-specific settings here, for example:

[user]
    name = "Your Work Name"
    email = "your.work@company.com"

[core]
    sshCommand = "ssh -i ~/.ssh/work_id_rsa"

# Add any other work-specific git settings...
EOF

    echo -e "${YELLOW}📝 Created template work config. Edit it now? (y/n)${NC}"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        ${EDITOR:-nano} /tmp/work-config.txt
    fi

    echo
    echo -e "${YELLOW}🔐 Encrypting work config...${NC}"

    # Create the template wrapper and encrypt
    (
        echo "{{- if .ageKeyExists -}}"
        age -r "$PUBLIC_KEY" /tmp/work-config.txt
        echo "{{- end -}}"
    ) > "$WORK_CONFIG_FILE"

    rm /tmp/work-config.txt

    echo -e "${GREEN}✅ Work config encrypted and saved to $WORK_CONFIG_FILE${NC}"

else
    echo -e "${YELLOW}📂 Found existing work config file${NC}"
    echo "This will decrypt, allow you to edit, and re-encrypt with the current age key."
    echo

    # Extract and decrypt the current content
    echo -e "${YELLOW}🔓 Decrypting current work config...${NC}"

    # Extract the encrypted content (between the template conditionals)
    sed -n '/^{{- if .ageKeyExists -}}$/,/^{{- end -}}$/p' "$WORK_CONFIG_FILE" | \
    sed '1d;$d' | \
    age -d -i "$AGE_KEY_FILE" > /tmp/work-config.txt 2>/dev/null || {
        echo -e "${RED}❌ Failed to decrypt existing work config${NC}"
        echo "The file may be encrypted with a different age key."
        echo -e "${YELLOW}💡 Create a new work config instead? (y/n)${NC}"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            rm -f "$WORK_CONFIG_FILE"
            exec "$0"  # Restart script
        else
            exit 1
        fi
    }

    echo -e "${GREEN}✅ Decrypted successfully${NC}"
    echo
    echo -e "${YELLOW}📝 Edit the work config? (y/n)${NC}"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        ${EDITOR:-nano} /tmp/work-config.txt
    fi

    echo
    echo -e "${YELLOW}🔐 Re-encrypting with current age key...${NC}"

    # Re-encrypt with current key
    (
        echo "{{- if .ageKeyExists -}}"
        age -r "$PUBLIC_KEY" /tmp/work-config.txt
        echo "{{- end -}}"
    ) > "$WORK_CONFIG_FILE"

    rm /tmp/work-config.txt

    echo -e "${GREEN}✅ Work config re-encrypted successfully${NC}"
fi

echo
echo -e "${GREEN}🎯 Done! Work config is now encrypted with your current age key.${NC}"
echo
echo "To apply the changes:"
echo "  chezmoi apply"
